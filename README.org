#+STARTUP: inlineimages
#+BIBLIOGRAPHY: refs.bib

* LibQrng

** Introduction

Through the software solution presented in this paper, we provide a method to interact with IDQ's Quantis Appliance network-attached device---a quantum random number generator that securely
generates high-quality random numbers [cite:@noauthor_quantis_nodate]---through REST API. We deliver an easy-to-extend solution for various programming languages and integrated projects. As such,
our solution's implementation supports the straightforward use of quantum-generated random numbers in applications and research areas in which the output of the experiments is highly dependent on
the quality of random numbers.  


** Software Architecture


IDQ's Quantis Appliance device is connected to the Local Area Network so that the random bytes are retrieved using REST APIs via HTTPS protocol.
As we show in Figure [[fig:archblock]], our proposed solution for using the IDQ's Quantis Appliance devices comprises 3 software layers: the /libqrng/ library (which uses /libcurl/ to request
data from the device by GET requests), the Foreign Function Interface used for calling the library API from different programming languages (currently we support the Python programming language by utilizing
the Python extension), and the Application Layer (for which we provide application examples that use the library directly or through the Foreign Function Interface).

#+CAPTION: The overview of using /libqrng/ with IDQ's Quantis Appliance network-attached device. Quantis Appliance connects to a Cloud Platform; /libqrng/ performs the request to retrieve random numbers using REST APIs via HTTP/HTTPS protocol. 
#+NAME: fig:archblock
[[./images/arch_block.png]]

Our /libqrng/ is a shared object that exports APIs to request random bytes from the IDQ Quantis Appliance. Figure [[fig:libqrng_init]] presents the library's initialization sequence.
As shown, the library uses /libcurl/ to perform network requests. The ~device_domain_address~ parameter is mandatory since it represents the IP address of the quantum random generator device.
Figures [[fig:libqrng_stream]], [[fig:libqrng_double]], and [[fig:libqrng_int]] present the sequences that retrieve the random bytes from the device and perform an interaction with /libcurl/.
The API to get a stream of random bytes, as shown in Figure [[fig:libqrng_stream]], is ~qrng_random_stream~ and accepts 2 parameters: the ~stream~ buffer that stores the bytes,
and the ~size~ of the requested stream. The APIs for getting random integers (32-bit or 64-bit integers) or doubles (float or double values), as presented in Figures [[fig:libqrng_double]]
and [[fig:libqrng_int]], accept 4 parameters: ~min~ (inclusive) and ~max~ (exclusive) that represent the number's range, ~samples~ that represent the number of requested samples,
and ~buffer~ that stores the values. Figure [[fig:libqrng_close]] presents the cleanup sequence.

#+CAPTION: Sequence diagram presenting the initialization of /libqrng/ and the interaction with /libcurl/.
#+NAME:   fig:libqrng_init
[[./images/libqrng_initialization.png]]


#+CAPTION: Sequence diagram presenting the option to get streams of random values.
#+NAME:   fig:libqrng_stream
[[./images/libqrng_random_stream.png]]


#+CAPTION: Sequence diagram presenting the option to get a random double value in a specified range $[min,max)$.
#+NAME:   fig:libqrng_double
[[./images/libqrng_double_value.png]]


#+CAPTION: Sequence diagram presenting the option to get a random integer value on 64 bits in a specified range $[min,max)$.
#+NAME:   fig:libqrng_int
[[./images/libqrng_int64.png]]

#+CAPTION: Sequence diagram presenting the cleanup of /libqrng/ and the interaction with /libcurl/.
#+NAME:   fig:libqrng_close
[[./images/libqrng_cleanup.png]]

** Build

** Installation

** Examples









#+BEGIN_SRC
                qrand version 1.0.28-25.05.2023

qrand [-h] [-a domain] [-s no of samples] [-m min double value] [-M max double value] [-i min int value] [-I max int value] [-t type] [-f stream]
-h       help
-a       domain address. [Default: random.cs.upt.ro]
-s       number of samples. [Default 1]
-m       min value double. [Default 0.0]
-M       max value double. [Default 1.0]
-i       min value int64. [Default 0]
-I       max value int64. [Default 1]
-t       type.
-f       stream.

================================
Possible values for t:
        0 -> 32-bit integer
        1 -> 64-bit integer
        2 -> double value
        3 -> float value
        4 -> stream of bytes
        5 -> device performance
        6 -> firmware info
        7 -> system info
```

#+END_SRC
# libqrng - library for interacting with IDQ's Quantis Appliance 


#+CITE_EXPORT: csl ~/.emacs.d/ieee.csl
#+PRINT_BIBLIOGRAPHY:
